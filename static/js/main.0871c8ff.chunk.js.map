{"version":3,"sources":["providers/modal.provider.jsx","components/counter/counter.styles.jsx","components/counter/counter.jsx","components/video-url/video-url.styles.jsx","components/video-url/video-url.jsx","components/video-player/video-player.styles.jsx","components/video-player/video-player.jsx","components/inner-modal/inner-modal.styles.jsx","components/spinner/spinner.styles.jsx","components/spinner/spinner.jsx","components/onclick-outside/onclick-outside.jsx","components/inner-modal/inner-modal.jsx","components/modal/modal.jsx","components/modal-container/modal-container.jsx","components/app/App.styles.jsx","global.styles.js","components/app/App.jsx","serviceWorker.js","index.jsx","providers/app.provider.jsx","components/custom-button/custom-button.styles.jsx","components/custom-button/custom-button.jsx"],"names":["ModalContext","createContext","state","showModal","modalType","modalProps","openModal","closeModal","useModalContext","useContext","ModalProvider","children","useState","setState","Provider","value","defaultProps","CounterContainer","styled","div","CounterTextContainer","h3","CounterButtonsContainer","Counter","useAppContext","count","incrementCount","decrementCount","countUpModalProps","text","onClick","large","countDownModalProps","SubmitVideoContainer","VideoUrl","url","setUrl","setVideoUrl","type","onChange","event","target","placeholder","VideoPlayerContainer","VideoPlayer","videoUrl","console","log","InnerModalContainer","InnerModalComponentContainer","SpinnerContainer","Spinner","OnClickOutside","action","enabled","wrapperRef","useRef","handleClockOutside","current","contains","undefined","useEffect","document","addEventListener","removeEventListener","ref","MODAL_COMPONENTS","BUTTON","lazy","VIDEO","InnerModal","SpecificModal","fallback","Modal","modal","querySelector","element","createElement","appendChild","removeChild","ReactDOM","createPortal","propTypes","PropTypes","node","ModalContainer","AppContainer","AppTitleText","h1","GlobalStyles","createGlobalStyle","App","Boolean","window","location","hostname","match","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","AppContext","AppProvider","prevState","largeButtonStyles","css","CustomButtonContainer","button","CustomButton","props"],"mappings":"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","file":"static/js/main.0871c8ff.chunk.js","sourcesContent":["// we need a provider for the modal functionality mainly because of the toggleModal prop\r\n// if we keep all the data in the same provider when we update it all the components that consume it will reload, including the modal component and it will trigger a flickering effect of it when counting up and down\r\nimport React, { useState, createContext, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CONTEXT = {\r\n  state: {\r\n    showModal: false,\r\n    modalType: \"\",\r\n    modalProps: {}\r\n  },\r\n  openModal: () => {},\r\n  closeModal: () => {}\r\n};\r\n\r\nconst ModalContext = createContext(CONTEXT);\r\nexport const useModalContext = () => useContext(ModalContext);\r\n\r\nconst ModalProvider = ({ children }) => {\r\n  const INITIAL_STATE = {\r\n    showModal: false,\r\n    modalType: \"\",\r\n    modalProps: {}\r\n  };\r\n\r\n  const [state, setState] = useState(INITIAL_STATE);\r\n  // openModal action allows us to open the modal component and also pass to it which type of component we want to load in the modal and the props to render it\r\n  const openModal = (modalType, modalProps) =>\r\n    setState({ showModal: true, modalType, modalProps });\r\n  const closeModal = () => setState({ ...state, showModal: false });\r\n\r\n  return (\r\n    <ModalContext.Provider value={{ state, openModal, closeModal }}>\r\n      {children}\r\n    </ModalContext.Provider>\r\n  );\r\n};\r\n\r\nModalProvider.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nModalProvider.defaultProps = {\r\n  children: null\r\n};\r\n\r\nexport default ModalProvider;\r\n","import styled from \"styled-components\";\r\n\r\nexport const CounterContainer = styled.div`\r\n  width: 30vw;\r\n  height: auto;\r\n  background-color: #fafafa;\r\n  box-shadow: 0 0 32px 8px rgba(0, 0, 0, 0.3);\r\n  border-radius: 32px;\r\n  margin: 20px auto 10px;\r\n  padding: 16px 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const CounterTextContainer = styled.h3`\r\n  color: skyblue;\r\n`;\r\n\r\nexport const CounterButtonsContainer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { useAppContext } from \"../../providers/app.provider\";\r\nimport { useModalContext } from \"../../providers/modal.provider\";\r\n\r\nimport CustomButton from \"../custom-button/custom-button\";\r\n\r\nimport {\r\n  CounterContainer,\r\n  CounterButtonsContainer,\r\n  CounterTextContainer\r\n} from \"./counter.styles\";\r\n\r\nconst Counter = () => {\r\n  // we get the state props and actions needed from the provider using the custom hook useAppContext\r\n  const {\r\n    state: { count },\r\n    incrementCount,\r\n    decrementCount\r\n  } = useAppContext();\r\n  const { openModal } = useModalContext();\r\n  // we create the objects that we are going to pass as props to the components inside the modal\r\n  const countUpModalProps = {\r\n    text: \"Count up\",\r\n    onClick: incrementCount,\r\n    large: true\r\n  };\r\n  const countDownModalProps = {\r\n    text: \"Count down\",\r\n    onClick: decrementCount,\r\n    large: true\r\n  };\r\n\r\n  return (\r\n    <CounterContainer>\r\n      <CounterTextContainer>Counter</CounterTextContainer>\r\n      <CounterTextContainer>{count}</CounterTextContainer>\r\n      <CounterButtonsContainer>\r\n        <CustomButton\r\n          text={\"Count up\"}\r\n          large={false}\r\n          onClick={() => openModal(\"BUTTON\", countUpModalProps)}\r\n        />\r\n        <CustomButton\r\n          text={\"Count down\"}\r\n          large={false}\r\n          onClick={() => openModal(\"BUTTON\", countDownModalProps)}\r\n        />\r\n      </CounterButtonsContainer>\r\n    </CounterContainer>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SubmitVideoContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n`;\r\n","import React, { useState } from \"react\";\r\n\r\nimport { useAppContext } from \"../../providers/app.provider\";\r\n\r\nimport CustomButton from \"../custom-button/custom-button\";\r\n\r\nimport { SubmitVideoContainer } from \"./video-url.styles\";\r\n\r\nconst VideoUrl = () => {\r\n  const [url, setUrl] = useState(\"\");\r\n  const { setVideoUrl } = useAppContext();\r\n\r\n  const handleChange = event => setUrl(event.target.value);\r\n  const submitUrl = () => {\r\n    setVideoUrl(url);\r\n    setUrl(\"\");\r\n  };\r\n  return (\r\n    <SubmitVideoContainer>\r\n      <input\r\n        type=\"text\"\r\n        value={url}\r\n        onChange={handleChange}\r\n        placeholder=\"Insert video url here\"\r\n      />\r\n      <CustomButton text=\"Submit video url\" onClick={submitUrl} />\r\n    </SubmitVideoContainer>\r\n  );\r\n};\r\n\r\nexport default VideoUrl;\r\n","import styled from \"styled-components\";\r\n\r\nexport const VideoPlayerContainer = styled.div`\r\n  width: 30vw;\r\n  height: auto;\r\n  background-color: #fafafa;\r\n  box-shadow: 0 0 32px 8px rgba(0, 0, 0, 0.3);\r\n  border-radius: 32px;\r\n  margin: 50px auto 30px;\r\n  padding: 16px 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { useAppContext } from \"../../providers/app.provider\";\r\nimport { useModalContext } from \"../../providers/modal.provider\";\r\n\r\nimport VideoUrl from \"../video-url/video-url\";\r\nimport CustomButton from \"../custom-button/custom-button\";\r\n\r\nimport { VideoPlayerContainer } from \"./video-player.styles\";\r\n\r\nconst VideoPlayer = () => {\r\n  const {\r\n    state: { videoUrl }\r\n  } = useAppContext();\r\n\r\n  const { openModal } = useModalContext();\r\n\r\n  return (\r\n    <VideoPlayerContainer>\r\n      <VideoUrl />\r\n      <CustomButton\r\n        text={\"Open modal for video\"}\r\n        onClick={() => {\r\n          console.log(videoUrl);\r\n          openModal(\"VIDEO\");\r\n        }}\r\n      />\r\n    </VideoPlayerContainer>\r\n  );\r\n};\r\n\r\nexport default VideoPlayer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const InnerModalContainer = styled.div`\r\n  background-color: rgba(255, 255, 255, 0.7);\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const InnerModalComponentContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: auto;\r\n  width: auto;\r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  box-shadow: 5px 10px 18px #888888;\r\n  border: 1px solid black;\r\n  border-radius: 10px;\r\n  padding: 10px;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const SpinnerContainer = styled.div`\r\n  display: inline-block;\r\n  width: 50px;\r\n  height: 50px;\r\n  border: 3px solid rgba(195, 195, 195, 0.6);\r\n  border-radius: 50%;\r\n  border-top-color: #636767;\r\n  animation: spin 1s ease-in-out infinite;\r\n  -webkit-animation: spin 1s ease-in-out infinite;\r\n  @keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n  @-webkit-keyframes spin {\r\n    to {\r\n      -webkit-transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { SpinnerContainer } from \"./spinner.styles\";\r\n\r\nconst Spinner = () => <SpinnerContainer />;\r\n\r\nexport default Spinner;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst OnClickOutside = ({ children, action, enabled }) => {\r\n  // we create the ref for the container we are going to use to check if the click is inside the component we are wrapping or outside\r\n  // useRef is a react hook that allows us to access a mutable object (current) with the html properties of the element referred\r\n  const wrapperRef = useRef(null);\r\n  // now we create a method that will trigger the action we pass as props in case the click is outside the wrapperRef\r\n  const handleClockOutside = event => {\r\n    // first we check if there is a reference object and if the target of the click is contained inside the reference object\r\n    if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\r\n      // then we check if there is an action passed through props to execute\r\n      // if so we execute it\r\n      if (action !== undefined) action();\r\n    }\r\n  };\r\n  // now we create a useEffect that will create event listener for the clicks and clean them when the OnClickOutside is unmounted\r\n  // since we are not adding a dependency array the code inside useEffect will trigger everytime OnClickOutside is rerendered (for example when its parents are rerendered) regardless if the props have changed\r\n  // if we want to only trigger useEffect depending if a value changes we have to pass it in the dependency array\r\n  // if we pass an empty array it will only trigger once when the component is mounted for the first time\r\n  useEffect(() => {\r\n    // first we check if the OnClickOutside functionality is enabled\r\n    if (enabled) {\r\n      // now we create the eventlisteners and we pass to it the callback function\r\n      document.addEventListener(\"mousedown\", handleClockOutside);\r\n      document.addEventListener(\"touchstart\", handleClockOutside);\r\n    }\r\n    return () => {\r\n      // we define the cleanup function that will trigger when the component is dismounted so it closes the eventlisteners\r\n      document.removeEventListener(\"mousedown\", handleClockOutside);\r\n      document.removeEventListener(\"touchstart\", handleClockOutside);\r\n    };\r\n  });\r\n  // finally we render the wrapper and the contained children\r\n  return <div ref={wrapperRef}>{children}</div>;\r\n};\r\n\r\nOnClickOutside.propTypes = {\r\n  children: PropTypes.node,\r\n  action: PropTypes.func,\r\n  enabled: PropTypes.bool\r\n};\r\n\r\nOnClickOutside.defaultProps = {\r\n  children: null,\r\n  action: () => {},\r\n  enabled: false\r\n};\r\n\r\nexport default OnClickOutside;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { useModalContext } from \"../../providers/modal.provider\";\r\nimport {\r\n  InnerModalContainer,\r\n  InnerModalComponentContainer\r\n} from \"./inner-modal.styles\";\r\nimport Spinner from \"../spinner/spinner\";\r\nimport OnClickOutside from \"../onclick-outside/onclick-outside\";\r\n// since we do not know what component are we going to load in the modal until the openModal action opens it and pass the type and props we lazy load all the posibilities\r\nconst lazyCustomButton = lazy(() => import(\"../custom-button/custom-button\"));\r\nconst lazyVideoContainer = lazy(() =>\r\n  import(\"../video-container/video-container\")\r\n);\r\n// we create a object with a correlative list of the string we receive as type of component to render and the lazy loaded component\r\nconst MODAL_COMPONENTS = {\r\n  BUTTON: lazyCustomButton,\r\n  VIDEO: lazyVideoContainer\r\n};\r\n\r\nconst InnerModal = () => {\r\n  // we get the modal type and props from the context\r\n  const {\r\n    state: { modalType, modalProps },\r\n    closeModal\r\n  } = useModalContext();\r\n  // we load in a default component container the component we have to render from the collection\r\n  const SpecificModal = MODAL_COMPONENTS[modalType];\r\n\r\n  return (\r\n    <InnerModalContainer>\r\n      <OnClickOutside action={closeModal} enabled>\r\n        <InnerModalComponentContainer>\r\n          <span>This is the modal (React Portal)</span>\r\n          <Suspense fallback={<Spinner />}>\r\n            <SpecificModal {...modalProps} />\r\n          </Suspense>\r\n        </InnerModalComponentContainer>\r\n      </OnClickOutside>\r\n    </InnerModalContainer>\r\n  );\r\n};\r\nexport default InnerModal;\r\n","import { useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Modal = ({ children }) => {\r\n  // we get the div with the id modal from the html\r\n  const modal = document.querySelector(\"#modal\");\r\n  // we create a container inside the modal root to contain the children\r\n  const element = document.createElement(\"div\");\r\n  // we use useEffect hook to mount the element in the modal root when Modal is rendered\r\n  useEffect(() => {\r\n    modal.appendChild(element);\r\n    return () => {\r\n      // once we dismount the Modal component we dismount the element from the modal root\r\n      modal.removeChild(element);\r\n    };\r\n  }, [element, modal]);\r\n  // we create the portal using the createPortal mehod from ReactDOM, first paramenter is what we want to render, the children of Modal component, and the second parameter is the container where we render it\r\n  return ReactDOM.createPortal(children, element);\r\n};\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nModal.defaultProps = {\r\n  children: null\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\n\r\nimport { useModalContext } from \"../../providers/modal.provider\";\r\n\r\nimport InnerModal from \"../inner-modal/inner-modal\";\r\nimport Modal from \"../modal/modal\";\r\n\r\nconst ModalContainer = () => {\r\n  const {\r\n    state: { showModal }\r\n  } = useModalContext();\r\n\r\n  return (\r\n    <div>\r\n      {showModal && (\r\n        <Modal>\r\n          <InnerModal />\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalContainer;\r\n","import styled from \"styled-components\";\r\n\r\nexport const AppContainer = styled.div`\r\n  width: 50vw;\r\n  height: auto;\r\n  background-color: #fafafa;\r\n  box-shadow: 0 0 32px 8px rgba(0, 0, 0, 0.3);\r\n  border-radius: 32px;\r\n  margin: 64px auto 0;\r\n  padding: 16px 32px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nexport const AppTitleText = styled.h1`\r\n  color: skyblue;\r\n`;\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n\r\nbody {\r\n  margin: 0;\r\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\r\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\r\n       sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  background-color: #ECEDF2;\r\n}\r\n\r\ncode {\r\n  font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\r\n    monospace;\r\n}\r\n/* this css is important for the modal to show correctly ontop of the rest of the app */\r\n#modal {\r\n  position: relative;\r\n  z-index: 999;\r\n}\r\n`;\r\n","import React from \"react\";\n\nimport AppProvider from \"../../providers/app.provider\";\nimport ModalProvider from \"../../providers/modal.provider\";\n\nimport Counter from \"../counter/counter\";\nimport VideoPlayer from \"../video-player/video-player\";\nimport ModalContainer from \"../modal-container/modal-container\";\n\nimport { AppContainer, AppTitleText } from \"./App.styles\";\nimport { GlobalStyles } from \"../../global.styles\";\n\nconst App = () => {\n  return (\n    <AppContainer>\n      <GlobalStyles />\n      <AppTitleText>This is a test app</AppTitleText>\n      <AppProvider>\n        <ModalProvider>\n          <Counter />\n          <VideoPlayer />\n          <ModalContainer />\n        </ModalProvider>\n      </AppProvider>\n    </AppContainer>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState, createContext, useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// we create an initial object for the context we are creating, with both state and actions.\r\n// the actions are defined as empty functions, inside the provider we will define the functions themself\r\nconst CONTEXT = {\r\n  state: {\r\n    count: 0,\r\n    videoUrl: \"\"\r\n  },\r\n  incrementCount: () => {},\r\n  decrementCount: () => {},\r\n  setVideoUrl: () => {}\r\n};\r\n// we create the context with its initial context object and a custom hook so we just have to call it when we want to get something from the context inside any component wrapped by the provider\r\nconst AppContext = createContext(CONTEXT);\r\nexport const useAppContext = () => useContext(AppContext);\r\n// now we create the provider that will wrap the part of the app we want it to have access to the context\r\nconst AppProvider = ({ children }) => {\r\n  // we define the initial state object\r\n  const INITIAL_STATE = {\r\n    count: 0,\r\n    videoUrl: \"\"\r\n  };\r\n  // we modify it using the useState hook that will give us acces to setState\r\n  const [state, setState] = useState(INITIAL_STATE);\r\n  // now we define the actions that are going to modify the state using setState\r\n  const incrementCount = () =>\r\n    setState(prevState => ({ ...prevState, count: prevState.count + 1 }));\r\n  const decrementCount = () =>\r\n    setState(prevState => ({ ...prevState, count: prevState.count - 1 }));\r\n  const setVideoUrl = url => setState({ ...state, videoUrl: url });\r\n  // finally we render the context provider, passing as value the state and the actions, wrapping its children\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        state,\r\n        incrementCount,\r\n        decrementCount,\r\n        setVideoUrl\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nAppProvider.propTypes = {\r\n  // node is anything that can be rendered: numbers, strings, elements or an array\r\n  children: PropTypes.node\r\n};\r\n\r\nAppProvider.defaultProps = {\r\n  children: null\r\n};\r\n\r\nexport default AppProvider;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nconst largeButtonStyles = css`\r\n  min-width: 100px;\r\n  height: 50px;\r\n  font-weight: 300;\r\n  font-size: inherit;\r\n`;\r\n\r\nexport const CustomButtonContainer = styled.button`\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 30px;\r\n  background-color: white;\r\n  color: #807a7a;\r\n  font-weight: 500;\r\n  box-shadow: 1px 2px 4px 0 rgba(0, 0, 0, 0.15);\r\n  border: none;\r\n  border-radius: 4px;\r\n  outline: none;\r\n  cursor: pointer;\r\n  margin: 5px;\r\n\r\n  &:active {\r\n    box-shadow: 1px 1px 2px 0 rgba(0, 0, 0, 0.15);\r\n  }\r\n\r\n  ${({ large }) => (large ? largeButtonStyles : \"\")}\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { CustomButtonContainer } from \"./custom-button.styles\";\r\n\r\nconst CustomButton = props => (\r\n  <CustomButtonContainer {...props}>\r\n    <span>{props.text}</span>\r\n  </CustomButtonContainer>\r\n);\r\n\r\n// https://reactjs.org/docs/typechecking-with-proptypes.html\r\nCustomButton.propTypes = {\r\n  large: PropTypes.bool,\r\n  text: PropTypes.string.isRequired,\r\n  onClick: PropTypes.func\r\n};\r\n\r\nCustomButton.defaultProps = {\r\n  large: false,\r\n  text: \"this is a button\",\r\n  onClick: () => console.log(\"Hello World!\")\r\n};\r\n\r\nexport default CustomButton;\r\n"],"sourceRoot":""}